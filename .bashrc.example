# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

parse_k8s_context() {
    echo -e "($(kubectl config current-context)\033[0;37m:\033[1;31m$(kubectl config view --minify | grep namespace: | awk '{print $2}'))\033[0m"
}

parse_git_branch() {
        if [ -d ".git" ]; then
            echo -e " \033[1;34m $(parse_k8s_context) \033[1;33m $(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')\033[0m"
        else
            echo -e " \033[1;34m $(parse_k8s_context) \033[0m"
        fi
}

PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \[\033[1;38;5;214m\]\w\[\033[01;33m\]$(parse_git_branch) \$\[\033[00m\]\n'

# PS1="\u@\h:\w\[\033[32m\]\$(parse_git_branch)\[\033[00m\]\$ "
source /usr/share/bash-completion/bash_completion

source <(kubectl completion bash)
export PATH=$PATH:/usr/local/bin

# GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
# GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules
# GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments

GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
# GIT_PROMPT_SHOW_UNTRACKED_FILES=normal # can be no, normal or all; determines counting of untracked files

# GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files

# GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh # uncomment to support Git older than 1.7.10

# GIT_PROMPT_START=...    # uncomment for custom prompt start sequence
# GIT_PROMPT_END=...      # uncomment for custom prompt end sequence

# as last entry source the gitprompt script
# GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
# GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh
# GIT_PROMPT_THEME=Solarized # use theme optimized for solarized color scheme


if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
    GIT_PROMPT_ONLY_IN_REPO=1
    source $HOME/.bash-git-prompt/gitprompt.sh
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

hlist() {
        local ns=${2}
        echo "helm -n $ns list | awk 'NR==1 || /$1/'"
        # using awk to print the first line
        # NR -  total number of records processed
        helm -n $ns list | awk "NR==1 || /$1/"
}

hchart() {
    local ns=${2}
    local chartname="${1:-jback}"
    echo "helm -n $ns list | grep $chartname | awk '{print $9}'";
    helm -n $ns list | grep $chartname | awk '{print $9}'
}

kwatch() {
    echo "watch 'kubectl get pods -o wide | awk 'NR==1 || /$1/'' ";
    watch "kubectl get pods -o wide | awk 'NR==1 || /$1/'"
}

kgrep() {
        local ns=$2
        echo "kubectl get pods -n $ns -o wide | awk 'NR==1 || /$1/' ";
        # using awk to print the first line
        # NR -  total number of records processed
        kubectl get pods -n $ns -o wide | awk "NR==1 || /$1/"
}

errpods() {
        local ns=$1
        echo "kubectl get pods -n $ns -o wide | awk '{ if (\$3 != "Running"){print} }'";
        kubectl get pods -n $ns -o wide | awk '{ if ($3 != "Running"){print} }'
}

kctx(){
        echo "kubectl config current-context";
        kubectl config current-context
}

setns(){
    local ns=$1
    kubectl config set-context $(kubectl config current-context) --namespace=$ns
}

setctx(){
    local ctx=${1}
    kubectl config use-context $ctx
}

#bash aliases
alias ll='ls -lahS'
alias l='ls -lahS'
alias opendir='nautilus'

#K8S aliases
alias kgp='kubectl get pods'
alias k="kubectl"
alias h="helm"

#Git aliases
alias g='git'
alias pl='git ft && git pl'
alias gst='git status'
alias gl='git pull'
alias gco='git checkout'
alias gcm='git checkout master'
alias gcd='git checkout develop'

alias gcl='git config --list'

alias glg='git log --stat --max-count=10'
alias glgg='git log --graph --max-count=10'
alias glgga='git log --graph --decorate --all'
alias glo='git log --graph --pretty="%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(yellow)- %an%C(reset)%C(red)%d%C(reset)"'
alias glog='git log --oneline --decorate --color --pretty="%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(yellow)- %an%C(reset)%C(red)%d%C(reset)"'

alias gsta='git stash'
alias gstp='git stash pop'

export KUBE_EDITOR='vim'
export SHELL='which bash'
export HISTSIZE=10000
